/*
 * Copyright (C) 2021 The Zion Authors
 * This file is part of The Zion library.
 *
 * The Zion is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Zion is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with The Zion.  If not, see <http://www.gnu.org/licenses/>.
 */

package zion

import (
	"math/big"
	"math/rand"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/contracts/native"
	nm "github.com/ethereum/go-ethereum/contracts/native/governance/node_manager"
	hsc "github.com/ethereum/go-ethereum/contracts/native/header_sync/common"
	nutils "github.com/ethereum/go-ethereum/contracts/native/utils"
	"github.com/stretchr/testify/assert"
)

var (
	testSupplyGas uint64 = 100000000000000000
)

func TestSyncGenesisAndBlockHeader(t *testing.T) {
	var (
		testEpochID          = uint64(2)
		testEpochStartHeight = uint64(120)
		testEpochPeersNum    = 4

		chainID          = uint64(12)
		genesisHeaderHex = "0x7b22706172656e7448617368223a22307865656466356233343833353334323438326432656566663366363963376666343264353132633531666161643333613032643866383062363234666665313061222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307832353861663438653238653461363834366539333164646666386531636466383537393832316535222c227374617465526f6f74223a22307866383432333532303932636338323239396133343163633263396165333432356462303638646262383734623163336531323066653062646466323562313561222c227472616e73616374696f6e73526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c227265636569707473526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307831222c226e756d626572223a223078333166222c226761734c696d6974223a2230783735343637326130222c2267617355736564223a22307830222c2274696d657374616d70223a2230783631373737366131222c22657874726144617461223ac226d697848617368223a22307836333734363936333631366332303632373937613631366537343639366536353230363636313735366337343230373436663663363537323631366536333635222c226e6f6e6365223a22307830303030303030303030303030303030222c2268617368223a22307865363762613335323366393032396231323761646130343061373435663765383861383034323034323331316632626231366161613366353164386431646463227d"
		callingBlockNum  = uint64(130)
	)

	hsc.ABI = hsc.GetABI()
	nm.InitABI()

	genesisHeader, err := hexutil.Decode(genesisHeaderHex)
	assert.NoError(t, err)

	epoch := testEpoch(t, testEpochID, testEpochStartHeight, testEpochPeersNum)

	// test sync genesis header
	payload, err := nutils.PackMethod(hsc.ABI, hsc.MethodSyncGenesisHeader, chainID, genesisHeader)
	assert.NoError(t, err)

	handler := new(Handler)
	for _, v := range epoch.Peers.List {
		sender := v.Address
		ctx := generateTestSenderTx(sender, sender, payload, callingBlockNum)
		if err := handler.SyncGenesisHeader(ctx); err != nil {
			t.Logf("err: %v", err)
		}
	}

	assert.True(t, isGenesisStored(testEmptyCtx, chainID))

	// test sync block header
	type TestHeaderAndEpochProof struct {
		RawHeaderHex string
	}

	list := []*TestHeaderAndEpochProof{
		{
			RawHeaderHex: "0x7b22706172656e7448617368223a22307838616462623761613131383037346335386365323039363662313937333461346130636661323839386635626663643031623038366230363833353166663561222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307838633039643933366131623430386436653061666161353337626134653036633435303461306165222c227374617465526f6f74223a22307838613533363466626233653764336335303736633963383837643834653935363964323737393735616239623432383034366133313161363035343336333962222c227472616e73616374696f6e73526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c227265636569707473526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307831222c226e756d626572223a223078343462222c226761734c696d6974223a2230783537376165393237222c2267617355736564223a22307830222c2274696d657374616d70223a2230783631373737383466222c22657874726144617461223ac226d697848617368223a22307836333734363936333631366332303632373937613631366537343639366536353230363636313735366337343230373436663663363537323631366536333635222c226e6f6e6365223a22307830303030303030303030303030303030222c2268617368223a22307865666433316265633361303035363832353030366233633638643135383962356335626132613561313966653032333630653834323336656136363832343135227d",
		},
	}

	epEncode := [][]byte{}
	for _, v := range list {
		blob, err := hexutil.Decode(v.RawHeaderHex)
		assert.NoError(t, err)
		epEncode = append(epEncode, blob)
	}

	sender := epoch.Peers.List[0].Address
	payload, err = nutils.PackMethod(hsc.ABI, hsc.MethodSyncBlockHeader, chainID, sender, epEncode)
	assert.NoError(t, err)

	ctx := generateTestSenderTx(sender, sender, payload, callingBlockNum)
	if err := handler.SyncBlockHeader(ctx); err != nil {
		t.Logf("err: %v", err)
	}

	height, valset, err := getEpoch(ctx, chainID)
	assert.NoError(t, err)
	t.Logf("next epoch start height %d", height)
	t.Logf("next epoch validators size %d and members %v", len(valset), valset)
}

func generateTestSenderTx(sender, caller common.Address, payload []byte, blockNum uint64) *native.NativeContract {
	txHash := nm.GenerateTestHash(rand.Int())
	ref := native.NewContractRef(testStateDB, sender, caller, new(big.Int).SetUint64(blockNum), txHash, testSupplyGas, nil)
	ref.PushContext(&native.Context{
		Caller:          sender,
		ContractAddress: nutils.HeaderSyncContractAddress,
		Payload:         payload,
	})
	return native.NewNativeContract(testStateDB, ref)
}

func testEpoch(t *testing.T, epochID, height uint64, peersNum int) *nm.EpochInfo {
	caller := common.EmptyAddress
	txHash := common.EmptyHash
	callingNum := new(big.Int).SetUint64(height - 1)

	ref := native.NewContractRef(testStateDB, caller, caller, callingNum, txHash, testSupplyGas, nil)
	ref.PushContext(&native.Context{
		Caller:          caller,
		ContractAddress: nutils.HeaderSyncContractAddress,
		Payload:         nil,
	})
	s := native.NewNativeContract(testStateDB, ref)
	curEpoch := nm.GenerateTestEpochInfo(epochID, height, peersNum)
	if err := nm.StoreTestEpoch(s, curEpoch); err != nil {
		t.Fatal(err)
	}
	return curEpoch
}
