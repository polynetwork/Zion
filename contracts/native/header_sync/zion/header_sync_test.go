/*
 * Copyright (C) 2021 The Zion Authors
 * This file is part of The Zion library.
 *
 * The Zion is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Zion is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with The Zion.  If not, see <http://www.gnu.org/licenses/>.
 */

package zion

import (
	"math/big"
	"math/rand"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/contracts/native"
	nm "github.com/ethereum/go-ethereum/contracts/native/governance/node_manager"
	hsc "github.com/ethereum/go-ethereum/contracts/native/header_sync/common"
	nutils "github.com/ethereum/go-ethereum/contracts/native/utils"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/rlp"
	"github.com/stretchr/testify/assert"
)

var (
	testSupplyGas uint64 = 100000000000000000
)

func TestSyncGenesisAndBlockHeader(t *testing.T) {
	var (
		testEpochID          = uint64(2)
		testEpochStartHeight = uint64(120)
		testEpochPeersNum    = 4

		chainID          = uint64(12)
		genesisHeaderHex = "0x7b22706172656e7448617368223a22307865656466356233343833353334323438326432656566663366363963376666343264353132633531666161643333613032643866383062363234666665313061222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307832353861663438653238653461363834366539333164646666386531636466383537393832316535222c227374617465526f6f74223a22307866383432333532303932636338323239396133343163633263396165333432356462303638646262383734623163336531323066653062646466323562313561222c227472616e73616374696f6e73526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c227265636569707473526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307831222c226e756d626572223a223078333166222c226761734c696d6974223a2230783735343637326130222c2267617355736564223a22307830222c2274696d657374616d70223a2230783631373737366131222c22657874726144617461223ac226d697848617368223a22307836333734363936333631366332303632373937613631366537343639366536353230363636313735366337343230373436663663363537323631366536333635222c226e6f6e6365223a22307830303030303030303030303030303030222c2268617368223a22307865363762613335323366393032396231323761646130343061373435663765383861383034323034323331316632626231366161613366353164386431646463227d"
		callingBlockNum  = uint64(130)
	)

	hsc.ABI = hsc.GetABI()
	nm.InitABI()

	genesisHeader, err := hexutil.Decode(genesisHeaderHex)
	assert.NoError(t, err)

	epoch := testEpoch(t, testEpochID, testEpochStartHeight, testEpochPeersNum)

	// test sync genesis header
	payload, err := nutils.PackMethod(hsc.ABI, hsc.MethodSyncGenesisHeader, chainID, genesisHeader)
	assert.NoError(t, err)

	handler := new(Handler)
	for _, v := range epoch.Peers.List {
		sender := v.Address
		ctx := generateTestSenderTx(sender, sender, payload, callingBlockNum)
		if err := handler.SyncGenesisHeader(ctx); err != nil {
			t.Logf("err: %v", err)
		}
	}

	assert.True(t, isGenesisStored(testEmptyCtx, chainID))

	// test sync block header
	type TestHeaderAndEpochProof struct {
		RawHeaderHex    string
		RawEpochHex     string
		RawProofJsonStr string
	}

	list := []*TestHeaderAndEpochProof{
		{
			RawHeaderHex: "0x7b22706172656e7448617368223a22307838616462623761613131383037346335386365323039363662313937333461346130636661323839386635626663643031623038366230363833353166663561222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307838633039643933366131623430386436653061666161353337626134653036633435303461306165222c227374617465526f6f74223a22307838613533363466626233653764336335303736633963383837643834653935363964323737393735616239623432383034366133313161363035343336333962222c227472616e73616374696f6e73526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c227265636569707473526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307831222c226e756d626572223a223078343462222c226761734c696d6974223a2230783537376165393237222c2267617355736564223a22307830222c2274696d657374616d70223a2230783631373737383466222c22657874726144617461223ac226d697848617368223a22307836333734363936333631366332303632373937613631366537343639366536353230363636313735366337343230373436663663363537323631366536333635222c226e6f6e6365223a22307830303030303030303030303030303030222c2268617368223a22307865666433316265633361303035363832353030366233633638643135383962356335626132613561313966653032333630653834323336656136363832343135227d",
			RawEpochHex: "0xf902ab05f9028ef9028bf85bb844307830326330376662376434386561633535396132343833653234396432373834316331386337636535646262626632373936613639363363633963656632376361626494258af48e28e4a6846e931ddff8e1cdf8579821e5f85bb8443078303266353133356165303835336166373166303137613865636236386537323062373239616239326337313233633638366537356237343837643461353761653037946a708455c8777630aac9d1e7702d13f7a865b27cf85bb8443078303365636163306562653732323463666430343035366339343036303561346139643463623033363763663538313962663765353530326266343466363862646434948c09d936a1b408d6e0afaa537ba4e06c4504a0aef85bb844307830336430656366643039646236623165346635396461376562646538663663336561336564303966303666353139303437376165346565353238656336393266613894ad3bf5ed640cc72f37bd21d64a65c3c756e9c88cf85bb844307830323434653530393130333434356435653866643239303630383330386431366430386337333936353564363939343235346534313362633161303637383338353694c095448424a5ecd5ca7ccdadfaad127a9d7e88ecf85bb844307830323338383464653239313438353035613864383632393932653537323137363764346234376666353266666162346332643235323731383264383132613664393594d47a4e56e9262543db39d9203cf1a2e53735f834f85bb844307830336238333866613233383762656233613536616564383665343437333039663838343463623230383338376336336166363461643734303732396235633061323794bfb558f0dceb07fbb09e1c283048b551a431092182044c94258af48e28e4a6846e931ddff8e1cdf8579821e502",
			RawProofJsonStr: `{"address":"0xa4bf827047a08510722b2d62e668a72fccfa232c","accountProof":["0xf901d1a03fcc929cd4de4523a85947f2901e7b2ebb40ed7e7b798ed4dbc38b1dc3bd0966a0ef1dcf53a29d51cd14fdc15753f8ac43ead21346da51c025cb37f4f62bbebf10a00955fb784f4a8d1e30f07fd7d682372f0d5978eb44236f2a3d907838da784591a0352a03c296be472cac5c189ac90c9c75431d6d9dfc1a9e502dfc8fd9507df537a0c891ca4bcc13742bc9bdd9d7e248f1be80a59250a47549e2f4ad7d191a8c817aa0cb72678be243c86782166cbc930f482676b31ee7d4dd8f257d8fa5a5e78dfeb7a0a952bf5c72fc73a55d4f5472df83484f2509f94d7ec1249178ba8179d8420fa4a00d4acd3af141cfd38da59ed14f4dd4d6a1dc2e99d8b7d476265c6d2508e9fec2a091cc76100ed9c6e2279af2ecc274d8d6b87eb8c39b0a5b36289272d0dff648dda0390310f48aaa4eb61cf64028096cebbce67fb5c8e977597645e5859237dfbce580a04bae44fb6eaa5adb4f2e43d5e984e3a496b58af2ead4cd98a5caf4aefb1e18eba062e4745a57b0201f3072f3638ccbe6c1d178a329d8f022ddf528ecaf0ee25aeba0fe9f4f2ce263c0056c240b0e97d9eda864d729564473466d7a4ebe37040066fe80a0b3600f8656bea96b084f77e64437487a8d1b2d7b6337b90a8a01c7d8dad81b5d80","0xf85180808080a0157fb3dff6b24695fb8525471ff05d750063431066a5e4ea1f934adc295ad4b98080a0a5c67cad3d75ba041d439a056bd377f41419037f4cffd47cb5c1bfa6a65efa5b808080808080808080","0xf869a020c95f7e3729a6463454a092263f59f28afe9de8b074f0112ce5ebfcc9d5cbffb846f8440180a0edbf76ccc0f5e23a2d134ad810bd6964d47fa4116e5196278a4459070db4babda0f4c95f7e3729a6463454a092263f59f28afe9de8b074f0112ce5ebfcc9d5cbff"],"balance":"0x0","codeHash":"0xf4c95f7e3729a6463454a092263f59f28afe9de8b074f0112ce5ebfcc9d5cbff","nonce":"0x1","storageHash":"0xedbf76ccc0f5e23a2d134ad810bd6964d47fa4116e5196278a4459070db4babd","storageProof":[{"key":"0xe71d2f8e284a5b3bfe5466b46b9aac29bc8bd494f7969a3511b9ae36999c318b","value":"0x11d1629cf73dad4ad7098f06eaac135b61dcad4bbc78223f53273f37724538a","proof":["0xf90211a0539634ecb4469ee1b6ea1451157de946f767edb6b6a4b86e8d261c7f078f56d3a00e8ae182f1726af2c1beeb061795259bcdafadb4bb628834cb64926b27cb640da0e085433339117689b83cc6d2276c365772829b63ca78a3838ece4cc26d9ef7f7a0b46b2749a546a901e4b27defe6f9eec7b9c8f233e8d02a3f12b796e29aeb3b4ba0e59e352332a982a29dd1925798bc6a72eeac2dfeca7191a315cfdbfff2eb1ec2a0baf03c6a1cd654cd719eefc9802351bfb0030ba77e04a50b1f934e2d89f195dda07716bc42463b7dd763ecf92e63311264309daafd5938de2d65297006c3d4c8bfa058b834d4fbecb47150bed378a6a5a481e4e005e115b996e37054b3f89ede66c7a0b94e8501061e01949b90a7abc96b8f6816ba0d5617fb0d11dd04e5c6ca1bad66a03bd4d1c6a408661ceca42bae5e624d7d7c8a73f02b80e882ff61973e75502a5da02f23489ab1de47ee919371f2f58a0640a02cc6a96bb6ce5b57534a4d2f10de86a0dab880d67d46424fffc75b75fc3f09a80e3d10a63ad3e46be8163193b8e25321a0b0f1d7836f21aa7232937c13460626abb02f25033074f31307687fd8b97debcca016a66dd5e0f2ab512fc781682ae60580a17215a085fd7ed5e6b9c959bbd49856a0bd668ab6393de1119ecb8946e6918aea9fa631d9da42514924834dd22b6db962a0f95a939eda43d2d73f6f82baad7a560fa77a4515a03a40d908211b162ed8860980","0xf8f18080808080a05b3a8f5e031495df31cab7db35e132b74643055d219308e36f1f66087fcfc86da0badd6f611d075652f5f6ade5ddae7fb7573948573efbfe63fb0e73b4011f7e1da04252d141bc86e99392d531ed8de0b3b469b87b870711c637b5f4dd3e5caa17d8a0ccc9e92b7ebcf86fed4dd2f5cee0837f9c20f58a49b35bc6d5c94baa5e31712380a0ce1452db35e6b25a25e0aff574e978c7f87e13155f891cb6988555b93cd2f7fa8080a0f5c7d119b53fe442136f53f959bad1aa62026ec8f5af719a09a1d43b77683c5780a079814e545b5915180fc1fc0a8bad0394fe96e39da23084459b17c99128575bbf80","0xf85180808080a0566a9781e52d4279532e367bdd1cf9a09c6af940c3a72f2da2be67abacc245d48080808080808080a0c8fb43da0e2f0f264ec3da302d6ff8f65f79f0c33e227bf4767ab01db005485b808080","0xf8429f3d238688cf555f33e0e597e88e6a7777d31c1172b1192d255e7b892daaea40a1a0011d1629cf73dad4ad7098f06eaac135b61dcad4bbc78223f53273f37724538a"]}]}`,
		},
	}
	epEncode := [][]byte{}
	lastStartHeight := uint64(0)
	lastValidators := []common.Address{}

	for _, v := range list {
		blob, err := hexutil.Decode(v.RawHeaderHex)
		assert.NoError(t, err)
		rawHeader := new(types.Header)
		assert.NoError(t, rawHeader.UnmarshalJSON(blob))

		blob, err = hexutil.Decode(v.RawEpochHex)
		rawEpoch := new(nm.EpochInfo)
		assert.NoError(t, rlp.DecodeBytes(blob, rawEpoch))

		hdWithEp := &HeaderWithEpoch{
			Header: rawHeader,
			Epoch:  rawEpoch,
			Proof:  []byte(v.RawProofJsonStr),
		}
		blob, err = hdWithEp.Encode()
		assert.NoError(t, err)

		lastStartHeight = rawEpoch.StartHeight
		lastValidators = rawEpoch.MemberList()
		epEncode = append(epEncode, blob)
	}

	sender := epoch.Peers.List[0].Address
	payload, err = nutils.PackMethod(hsc.ABI, hsc.MethodSyncBlockHeader, chainID, sender, epEncode)
	assert.NoError(t, err)

	ctx := generateTestSenderTx(sender, sender, payload, callingBlockNum)
	if err := handler.SyncBlockHeader(ctx); err != nil {
		t.Logf("err: %v", err)
	}

	height, valset, err := getEpoch(ctx, chainID)
	assert.NoError(t, err)

	assert.Equal(t, lastStartHeight, height)
	assert.Equal(t, lastValidators, valset)
}

func generateTestSenderTx(sender, caller common.Address, payload []byte, blockNum uint64) *native.NativeContract {
	txHash := nm.GenerateTestHash(rand.Int())
	ref := native.NewContractRef(testStateDB, sender, caller, new(big.Int).SetUint64(blockNum), txHash, testSupplyGas, nil)
	ref.PushContext(&native.Context{
		Caller:          sender,
		ContractAddress: nutils.HeaderSyncContractAddress,
		Payload:         payload,
	})
	return native.NewNativeContract(testStateDB, ref)
}

func testEpoch(t *testing.T, epochID, height uint64, peersNum int) *nm.EpochInfo {
	caller := common.EmptyAddress
	txHash := common.EmptyHash
	callingNum := new(big.Int).SetUint64(height - 1)

	ref := native.NewContractRef(testStateDB, caller, caller, callingNum, txHash, testSupplyGas, nil)
	ref.PushContext(&native.Context{
		Caller:          caller,
		ContractAddress: nutils.HeaderSyncContractAddress,
		Payload:         nil,
	})
	s := native.NewNativeContract(testStateDB, ref)
	curEpoch := nm.GenerateTestEpochInfo(epochID, height, peersNum)
	if err := nm.StoreTestEpoch(s, curEpoch); err != nil {
		t.Fatal(err)
	}
	return curEpoch
}

