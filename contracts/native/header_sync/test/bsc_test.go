package test
import (
	"bytes"
	"encoding/hex"
	"encoding/json"
	"log"
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	ethcommon "github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/contracts/native"
	scom "github.com/ethereum/go-ethereum/contracts/native/header_sync/common"
	etypes "github.com/ethereum/go-ethereum/contracts/native/header_sync/eth/types"
	"github.com/ethereum/go-ethereum/contracts/native/header_sync/bsc"
	"github.com/ethereum/go-ethereum/contracts/native/utils"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/stretchr/testify/assert"
	cstates "github.com/polynetwork/poly/core/states"

)
func TestBscSyncGenesisHeader(t *testing.T) {

	genesisHeader := hex2Header("7b22706172656e7448617368223a22307833343364323161623132303964343137393466313763373466323563646637316630623762336465376239306631323836336464336561313434393838326534222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c227374617465526f6f74223a22307862613732666532396233376437663336396639623561313836636533656664356330623866313562353531363130313139373065316165666162333331366563222c227472616e73616374696f6e73526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c227265636569707473526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307832222c226e756d626572223a223078336139383030222c226761734c696d6974223a223078376131323030222c2267617355736564223a22307830222c2274696d657374616d70223a2230783631326562626565222c22657874726144617461223ac226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307839366164643161633839376232303432343662393835633436343139646338633734653063373431366138636336303831333365343437336331383130383466227d")
	genesisHeaderBytes, _ := json.Marshal(genesisHeader)
	param := new(scom.SyncGenesisHeaderParam)
	param.ChainID = bscChainID
	param.GenesisHeader = genesisHeaderBytes
	input, err := utils.PackMethodWithStruct(scom.ABI, scom.MethodSyncGenesisHeader, param)
	assert.Nil(t, err)
	caller := crypto.PubkeyToAddress(*acct)
	blockNumber := big.NewInt(1)
	extra := uint64(10)
	contractRef := native.NewContractRef(sdb, caller, caller, blockNumber, common.Hash{}, scom.GasTable[scom.MethodSyncGenesisHeader]+extra, nil)
	ret, leftOverGas, err := contractRef.NativeCall(caller, utils.HeaderSyncContractAddress, input)

	assert.Nil(t, err)

	result, err := utils.PackOutputs(scom.ABI, scom.MethodSyncGenesisHeader, true)
	assert.Nil(t, err)
	assert.Equal(t, ret, result)
	assert.Equal(t, leftOverGas, extra)
	contract := native.NewNativeContract(sdb, contractRef)
	height := getBscLatestHeight(contract)
	assert.Equal(t, uint64(7152785), height)
	header7152785Hash := getBscHeaderHashByHeight(contract, 7152785)
	assert.Equal(t, true, bytes.Equal(ethcommon.HexToHash("90a1bc9c5f2e29ce1f605b23f3fa6bb064fdbe553a8162bfdfa3b9bb8d0600e7").Bytes(), header7152785Hash.Bytes()))
	header7152785_formstore := getEthHeaderByHash(contract, header7152785Hash)
	assert.Equal(t, true, bytes.Equal(header7152785_formstore, header7152785))
}
func getBscLatestHeight(native *native.NativeContract) uint64 {
	height, err := bsc.GetCanonicalHeight(native, bscChainID)
	if err != nil {
		return 0
	}

	return height
}
func getBscHeaderHashByHeight(native *native.NativeContract, height uint64) ethcommon.Hash {
	hws, err := bsc.GetCanonicalHeader(native, mscChainID, height)
	if err != nil {
		return ethcommon.Hash{}
	}

	return hws.Header.Hash()
}

func getBscHeaderByHash(native *native.NativeContract, hash ethcommon.Hash) []byte {
	hws, err := bsc.GetHeader(native, hash, mscChainID)
	if err != nil {
		return nil
	}

	headerOnly, _ := json.Marshal(hws.Header)
	return headerOnly
}