package test

import (
	"bytes"
	"encoding/hex"
	"encoding/json"
	"log"
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	ethcommon "github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/contracts/native"
	scom "github.com/ethereum/go-ethereum/contracts/native/header_sync/common"
	etypes "github.com/ethereum/go-ethereum/contracts/native/header_sync/eth/types"
	"github.com/ethereum/go-ethereum/contracts/native/header_sync/msc"
	"github.com/ethereum/go-ethereum/contracts/native/utils"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/stretchr/testify/assert"
)

func TestMscSyncGenesisHeader(t *testing.T) {

	genesisHeader := hex2Header("7b22706172656e7448617368223a22307833343364323161623132303964343137393466313763373466323563646637316630623762336465376239306631323836336464336561313434393838326534222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c227374617465526f6f74223a22307862613732666532396233376437663336396639623561313836636533656664356330623866313562353531363130313139373065316165666162333331366563222c227472616e73616374696f6e73526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c227265636569707473526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307832222c226e756d626572223a223078336139383030222c226761734c696d6974223a223078376131323030222c2267617355736564223a22307830222c2274696d657374616d70223a2230783631326562626565222c22657874726144617461223ac226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307839366164643161633839376232303432343662393835633436343139646338633734653063373431366138636336303831333365343437336331383130383466227d")
	genesisHeaderBytes, _ := json.Marshal(genesisHeader)

	param := new(scom.SyncGenesisHeaderParam)
	param.ChainID = mscChainID
	param.GenesisHeader = genesisHeaderBytes

	input, err := utils.PackMethodWithStruct(scom.ABI, scom.MethodSyncGenesisHeader, param)
	assert.Nil(t, err)

	caller := crypto.PubkeyToAddress(*acct)
	blockNumber := big.NewInt(1)
	extra := uint64(10)
	contractRef := native.NewContractRef(sdb, caller, caller, blockNumber, common.Hash{}, scom.GasTable[scom.MethodSyncGenesisHeader]+extra, nil)
	ret, leftOverGas, err := contractRef.NativeCall(caller, utils.HeaderSyncContractAddress, input)

	assert.Nil(t, err)

	result, err := utils.PackOutputs(scom.ABI, scom.MethodSyncGenesisHeader, true)
	assert.Nil(t, err)
	assert.Equal(t, ret, result)
	assert.Equal(t, leftOverGas, extra)

	contract := native.NewNativeContract(sdb, contractRef)
	height := getMscLatestHeight(contract)
	assert.Equal(t, genesisHeader.Number.Uint64(), height)
	headerHash := getMscHeaderHashByHeight(contract, height)
	assert.Equal(t, true, (*etypes.Header)(genesisHeader).Hash() == headerHash)
	headerFromStore := getMscHeaderByHash(contract, headerHash)
	assert.Equal(t, true, bytes.Equal(headerFromStore, genesisHeaderBytes))

}

func TestMscSyncGenesisHeaderNoOperator(t *testing.T) {

	genesisHeader := hex2Header("7b22706172656e7448617368223a22307833343364323161623132303964343137393466313763373466323563646637316630623762336465376239306631323836336464336561313434393838326534222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c227374617465526f6f74223a22307862613732666532396233376437663336396639623561313836636533656664356330623866313562353531363130313139373065316165666162333331366563222c227472616e73616374696f6e73526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c227265636569707473526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307832222c226e756d626572223a223078336139383030222c226761734c696d6974223a223078376131323030222c2267617355736564223a22307830222c2274696d657374616d70223a2230783631326562626565222c22657874726144617461223a223078643838333031306130323834363736353734363838383637366633313265333133343265333638353663363936653735373830303030303030303030303030303135316634333761346430623264393931646638303532303135623064633864646464623639376133623963333134653762656361363539356663343437306566393263356366613537363363313261383437303534303531656334393166346239333635306332373064346562633065353763323633636364333733386231373636383437626533653236616531333135643437653161343066323663363564663661343735373361396661363432643631353038393234623861663539643139653362363638653335333062616564336633393832656266616662613532373566336361653537663831323135386638626533346133333334323164326239366531313733666638383461656631646632646231363661663938663332613030222c226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307839366164643161633839376232303432343662393835633436343139646338633734653063373431366138636336303831333365343437336331383130383466227d")
	genesisHeaderBytes, _ := json.Marshal(genesisHeader)

	param := new(scom.SyncGenesisHeaderParam)
	param.ChainID = mscChainID
	param.GenesisHeader = genesisHeaderBytes

	input, err := utils.PackMethodWithStruct(scom.ABI, scom.MethodSyncGenesisHeader, param)
	assert.Nil(t, err)

	caller := common.HexToAddress("0x11")
	blockNumber := big.NewInt(1)
	extra := uint64(10)
	contractRef := native.NewContractRef(sdb, caller, caller, blockNumber, common.Hash{}, scom.GasTable[scom.MethodSyncGenesisHeader]+extra, nil)
	_, _, err = contractRef.NativeCall(caller, utils.HeaderSyncContractAddress, input)

	assert.Nil(t, err)
	contract := native.NewNativeContract(sdb, contractRef)
	height := getMscLatestHeight(contract)
	assert.Equal(t, uint64(0), height)
}

func hex2Header(hStr string) *etypes.Header {
	hbytes, _ := hex.DecodeString(hStr)
	var header etypes.Header
	err := json.Unmarshal(hbytes, &header)
	if err != nil {
		log.Fatal("json invalid", err)
	}
	return &header
}

func TestMscSyncBlockHeader(t *testing.T) {

	var height uint64
	{
		genesisHeader := hex2Header("7b22706172656e7448617368223a22307833343364323161623132303964343137393466313763373466323563646637316630623762336465376239306631323836336464336561313434393838326534222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c227374617465526f6f74223a22307862613732666532396233376437663336396639623561313836636533656664356330623866313562353531363130313139373065316165666162333331366563222c227472616e73616374696f6e73526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c227265636569707473526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307832222c226e756d626572223a223078336139383030222c226761734c696d6974223a223078376131323030222c2267617355736564223a22307830222c2274696d657374616d70223a2230783631326562626565222c22657874726144617461223ac226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307839366164643161633839376232303432343662393835633436343139646338633734653063373431366138636336303831333365343437336331383130383466227d")
		genesisHeaderBytes, _ := json.Marshal(genesisHeader)
		height = genesisHeader.Number.Uint64()

		param := new(scom.SyncGenesisHeaderParam)
		param.ChainID = mscChainID
		param.GenesisHeader = genesisHeaderBytes

		input, err := utils.PackMethodWithStruct(scom.ABI, scom.MethodSyncGenesisHeader, param)
		assert.Nil(t, err)

		caller := crypto.PubkeyToAddress(*acct)
		blockNumber := big.NewInt(1)
		extra := uint64(10)
		contractRef := native.NewContractRef(sdb, caller, caller, blockNumber, common.Hash{}, scom.GasTable[scom.MethodSyncGenesisHeader]+extra, nil)
		ret, leftOverGas, err := contractRef.NativeCall(caller, utils.HeaderSyncContractAddress, input)

		assert.Nil(t, err)

		result, err := utils.PackOutputs(scom.ABI, scom.MethodSyncGenesisHeader, true)
		assert.Nil(t, err)
		assert.Equal(t, ret, result)
		assert.Equal(t, leftOverGas, extra)
	}

	caller := crypto.PubkeyToAddress(*acct)
	{

		n1 := hex2Header("7b22706172656e7448617368223a22307839366164643161633839376232303432343662393835633436343139646338633734653063373431366138636336303831333365343437336331383130383466222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c227374617465526f6f74223a22307862613732666532396233376437663336396639623561313836636533656664356330623866313562353531363130313139373065316165666162333331366563222c227472616e73616374696f6e73526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c227265636569707473526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307832222c226e756d626572223a223078336139383031222c226761734c696d6974223a223078376131323030222c2267617355736564223a22307830222c2274696d657374616d70223a2230783631326562626631222c22657874726144617461223a2230786438383330313061303238343637363537343638383836373666333132653331333432653336383536633639366537353738303030303030303030303030303033613136646662613365393738313534336261303033323262663532653536663466643131636333383037623736303231336365636432346164626231326332366336303436353836356162376335363336353364626233663565366333363537643566353232623735383864363463363833313632376163353863323430393030222c226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307861626336306634636333346536373163643563353937643064656530383734646535376166616136333431316233316139353539323837623533613165646264227d")
		n1Bytes, _ := json.Marshal(n1)
		n2 := hex2Header("7b22706172656e7448617368223a22307861626336306634636333346536373163643563353937643064656530383734646535376166616136333431316233316139353539323837623533613165646264222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c227374617465526f6f74223a22307862613732666532396233376437663336396639623561313836636533656664356330623866313562353531363130313139373065316165666162333331366563222c227472616e73616374696f6e73526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c227265636569707473526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c226c6f6773426c6f6f6d223a2230783030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c22646966666963756c7479223a22307832222c226e756d626572223a223078336139383032222c226761734c696d6974223a223078376131323030222c2267617355736564223a22307830222c2274696d657374616d70223a2230783631326562626634222c22657874726144617461223a2230786438383330313061303238343637363537343638383836373666333132653331333532653336383536633639366537353738303030303030303030303030303066303137616131616132363465623563616434323766386137373065303930623433623134653162653035633265666233626130663534376435643631633837346235616163626438303532326637323235306538396638633730313931363037636131383236653831623935366235303439646336326462373133313137663031222c226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307861613837636637613764343639633731623139646136636564353332363331373964633335363666396162333939626336336661363133623763333666323634227d")
		n2Bytes, _ := json.Marshal(n2)
		n3 := hex2Header("7b22706172656e7448617368223a22307861613837636637613764343639633731623139646136636564353332363331373964633335363666396162333939626336336661363133623763333666323634222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c227374617465526f6f74223a22307862613732666532396233376437663336396639623561313836636533656664356330623866313562353531363130313139373065316165666162333331366563222c227472616e73616374696f6e73526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c227265636569707473526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307831222c226e756d626572223a223078336139383033222c226761734c696d6974223a223078376131323030222c2267617355736564223a22307830222c2274696d657374616d70223a2230783631326562626637222c22657874726144617461223a2230786438383330313061303238343637363537343638383836373666333132653331333432653336383536633639366537353738303030303030303030303030303035343039303565343138363764623730393263663138373061353133613661373362343330623832613565396434373935326630643734633962343365313737373239343632646164666533346631656339303235623539363265376265343734373236343563663035396265663535646166653737313936383137653933643031222c226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307862656233356364376132346534363036306165376361313363626339366237366530383663653836623162653262643331306163323733613339373731376136227d")
		n3Bytes, _ := json.Marshal(n3)
		n4 := hex2Header("7b22706172656e7448617368223a22307862656233356364376132346534363036306165376361313363626339366237366530383663653836623162653262643331306163323733613339373731376136222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c227374617465526f6f74223a22307862613732666532396233376437663336396639623561313836636533656664356330623866313562353531363130313139373065316165666162333331366563222c227472616e73616374696f6e73526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c227265636569707473526f6f74223a22307835366538316631373162636335356136666638333435653639326330663836653562343865303162393936636164633030313632326662356533363362343231222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307831222c226e756d626572223a223078336139383034222c226761734c696d6974223a223078376131323030222c2267617355736564223a22307830222c2274696d657374616d70223a2230783631326562626661222c22657874726144617461223a2230786438383330313061303238343637363537343638383836373666333132653331333432653336383536633639366537353738303030303030303030303030303062346238363230636365353438646461613332336463383464386633383862343534626562666135316637633635383938633564653666646563643265343139303564366537303364653239636664666461343633356363643636343033323533336162393436646437333230373531643438653463323166363339616233373031222c226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307833646234396166306164663364373237313061656435613437643164326664356634643931646564346632663161373464666134306439633232303562383639227d")
		n4Bytes, _ := json.Marshal(n4)
		h2h := map[uint64]*etypes.Header{
			height + 1: n1,
			height + 2: n2,
			height + 3: n3,
			height + 4: n4,
		}

		param := new(scom.SyncBlockHeaderParam)
		param.ChainID = mscChainID
		param.Address = caller
		param.Headers = append(param.Headers, n1Bytes)
		param.Headers = append(param.Headers, n2Bytes)
		param.Headers = append(param.Headers, n3Bytes)
		param.Headers = append(param.Headers, n4Bytes)

		// fmt.Println("gHeight", height)
		input, err := utils.PackMethodWithStruct(scom.ABI, scom.MethodSyncBlockHeader, param)
		assert.Nil(t, err)

		caller := crypto.PubkeyToAddress(*acct)
		blockNumber := big.NewInt(1)
		extra := uint64(10)
		contractRef := native.NewContractRef(sdb, caller, caller, blockNumber, common.Hash{}, scom.GasTable[scom.MethodSyncBlockHeader]+extra, nil)
		ret, leftOverGas, err := contractRef.NativeCall(caller, utils.HeaderSyncContractAddress, input)

		assert.Nil(t, err)

		result, err := utils.PackOutputs(scom.ABI, scom.MethodSyncBlockHeader, true)
		assert.Nil(t, err)
		assert.Equal(t, ret, result)
		assert.Equal(t, leftOverGas, extra)
		contract := native.NewNativeContract(sdb, contractRef)
		latestHeight := getMscLatestHeight(contract)
		assert.Equal(t, latestHeight, height+4)

		for h := height + 1; h <= height+4; h++ {
			headerHash := getMscHeaderHashByHeight(contract, h)
			assert.Equal(t, true, headerHash == h2h[h].Hash())
			headerBytesFromStore := getMscHeaderByHash(contract, headerHash)
			headerBytes, _ := json.Marshal(h2h[h])
			assert.Equal(t, true, bytes.Equal(headerBytesFromStore, headerBytes))
		}
	}
}

func getMscHeaderByHash(native *native.NativeContract, hash ethcommon.Hash) []byte {
	hws, err := msc.GetHeader(native, hash, mscChainID)
	if err != nil {
		return nil
	}

	headerOnly, _ := json.Marshal(hws.Header)
	return headerOnly
}

func getMscHeaderHashByHeight(native *native.NativeContract, height uint64) ethcommon.Hash {
	hws, err := msc.GetCanonicalHeader(native, mscChainID, height)
	if err != nil {
		return ethcommon.Hash{}
	}

	return hws.Header.Hash()
}

func getMscLatestHeight(native *native.NativeContract) uint64 {
	height, err := msc.GetCanonicalHeight(native, mscChainID)
	if err != nil {
		return 0
	}

	return height
}
