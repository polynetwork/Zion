/*
 * Copyright (C) 2021 The Zion Authors
 * This file is part of The Zion library.
 *
 * The Zion is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Zion is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with The Zion.  If not, see <http://www.gnu.org/licenses/>.
 */

package lock_proxy

import (
	"math/big"
	"math/rand"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/contracts/native"
	nm "github.com/ethereum/go-ethereum/contracts/native/governance/node_manager"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/stretchr/testify/assert"
)

func TestInitGenesisBlock(t *testing.T) {
	resetTestContext()

	sender := common.EmptyAddress
	rawHeader := `{"parentHash":"0x8adbb7aa118074c58ce20966b19734a4a0cfa2898f5bfcd01b086b068351ff5a","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","miner":"0x8c09d936a1b408d6e0afaa537ba4e06c4504a0ae","stateRoot":"0x8a5364fbb3e7d3c5076c9c887d84e9569d277975ab9b428046a311a60543639b","transactionsRoot":"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421","receiptsRoot":"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","difficulty":"0x1","number":"0x44b","gasLimit":"0x577ae927","gasUsed":"0x0","timestamp":"0x6177784f","extraData":"0x0000000000000000000000000000000000000000000000000000000000000000f901e8f89394258af48e28e4a6846e931ddff8e1cdf8579821e5946a708455c8777630aac9d1e7702d13f7a865b27c948c09d936a1b408d6e0afaa537ba4e06c4504a0ae94ad3bf5ed640cc72f37bd21d64a65c3c756e9c88c94c095448424a5ecd5ca7ccdadfaad127a9d7e88ec94d47a4e56e9262543db39d9203cf1a2e53735f83494bfb558f0dceb07fbb09e1c283048b551a4310921b8418aece0db7a7534f6d8f3b2b49c5bd5aae27c20fe8637f57670c24c8255a7119d1d70eb279d1dceb397514f6c7182981aad0b20febd18d00653056fb837d205cc01f9010cb841e065730b6ab96d2172eb9c34c7b89dcec57a4933ffdc0e941ac0beb91a69861604007302525252a94919e0f302830cd444ab43b52f593a8a287afc82aa5ef08f00b841e3696e39bb78b65fb9a9af5960e95147a8a2b54fdb78876a1ac5adeb2d09497c33bbf05bd0cdcc921e16ab66a3b409268b551ee9f805db587e19557d3e5bad7701b8417ed6a92254435c47ce41c8119621a1b9a2e1eda12241912c8127b5fd3ee76d9d5b9326dc50ae6e4f9d142086a7eb4b99f5bdd270d86d22adbe4591c33c6f5c4700b8418aece0db7a7534f6d8f3b2b49c5bd5aae27c20fe8637f57670c24c8255a7119d1d70eb279d1dceb397514f6c7182981aad0b20febd18d00653056fb837d205cc0180","mixHash":"0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365","nonce":"0x0000000000000000","hash":"0xefd31bec3a0056825006b3c68d1589b5c5ba2a5a19fe02360e84236ea6682415"}`
	header := new(types.Header)
	assert.NoError(t, header.UnmarshalJSON([]byte(rawHeader)))
	rawProof := `{"address":"0xa4bf827047a08510722b2d62e668a72fccfa232c","accountProof":["0xf901d1a03fcc929cd4de4523a85947f2901e7b2ebb40ed7e7b798ed4dbc38b1dc3bd0966a0ef1dcf53a29d51cd14fdc15753f8ac43ead21346da51c025cb37f4f62bbebf10a00955fb784f4a8d1e30f07fd7d682372f0d5978eb44236f2a3d907838da784591a0352a03c296be472cac5c189ac90c9c75431d6d9dfc1a9e502dfc8fd9507df537a0c891ca4bcc13742bc9bdd9d7e248f1be80a59250a47549e2f4ad7d191a8c817aa0cb72678be243c86782166cbc930f482676b31ee7d4dd8f257d8fa5a5e78dfeb7a0a952bf5c72fc73a55d4f5472df83484f2509f94d7ec1249178ba8179d8420fa4a00d4acd3af141cfd38da59ed14f4dd4d6a1dc2e99d8b7d476265c6d2508e9fec2a091cc76100ed9c6e2279af2ecc274d8d6b87eb8c39b0a5b36289272d0dff648dda0390310f48aaa4eb61cf64028096cebbce67fb5c8e977597645e5859237dfbce580a04bae44fb6eaa5adb4f2e43d5e984e3a496b58af2ead4cd98a5caf4aefb1e18eba062e4745a57b0201f3072f3638ccbe6c1d178a329d8f022ddf528ecaf0ee25aeba0fe9f4f2ce263c0056c240b0e97d9eda864d729564473466d7a4ebe37040066fe80a0b3600f8656bea96b084f77e64437487a8d1b2d7b6337b90a8a01c7d8dad81b5d80","0xf85180808080a0157fb3dff6b24695fb8525471ff05d750063431066a5e4ea1f934adc295ad4b98080a0a5c67cad3d75ba041d439a056bd377f41419037f4cffd47cb5c1bfa6a65efa5b808080808080808080","0xf869a020c95f7e3729a6463454a092263f59f28afe9de8b074f0112ce5ebfcc9d5cbffb846f8440180a0edbf76ccc0f5e23a2d134ad810bd6964d47fa4116e5196278a4459070db4babda0f4c95f7e3729a6463454a092263f59f28afe9de8b074f0112ce5ebfcc9d5cbff"],"balance":"0x0","codeHash":"0xf4c95f7e3729a6463454a092263f59f28afe9de8b074f0112ce5ebfcc9d5cbff","nonce":"0x1","storageHash":"0xedbf76ccc0f5e23a2d134ad810bd6964d47fa4116e5196278a4459070db4babd","storageProof":[{"key":"0xe71d2f8e284a5b3bfe5466b46b9aac29bc8bd494f7969a3511b9ae36999c318b","value":"0x11d1629cf73dad4ad7098f06eaac135b61dcad4bbc78223f53273f37724538a","proof":["0xf90211a0539634ecb4469ee1b6ea1451157de946f767edb6b6a4b86e8d261c7f078f56d3a00e8ae182f1726af2c1beeb061795259bcdafadb4bb628834cb64926b27cb640da0e085433339117689b83cc6d2276c365772829b63ca78a3838ece4cc26d9ef7f7a0b46b2749a546a901e4b27defe6f9eec7b9c8f233e8d02a3f12b796e29aeb3b4ba0e59e352332a982a29dd1925798bc6a72eeac2dfeca7191a315cfdbfff2eb1ec2a0baf03c6a1cd654cd719eefc9802351bfb0030ba77e04a50b1f934e2d89f195dda07716bc42463b7dd763ecf92e63311264309daafd5938de2d65297006c3d4c8bfa058b834d4fbecb47150bed378a6a5a481e4e005e115b996e37054b3f89ede66c7a0b94e8501061e01949b90a7abc96b8f6816ba0d5617fb0d11dd04e5c6ca1bad66a03bd4d1c6a408661ceca42bae5e624d7d7c8a73f02b80e882ff61973e75502a5da02f23489ab1de47ee919371f2f58a0640a02cc6a96bb6ce5b57534a4d2f10de86a0dab880d67d46424fffc75b75fc3f09a80e3d10a63ad3e46be8163193b8e25321a0b0f1d7836f21aa7232937c13460626abb02f25033074f31307687fd8b97debcca016a66dd5e0f2ab512fc781682ae60580a17215a085fd7ed5e6b9c959bbd49856a0bd668ab6393de1119ecb8946e6918aea9fa631d9da42514924834dd22b6db962a0f95a939eda43d2d73f6f82baad7a560fa77a4515a03a40d908211b162ed8860980","0xf8f18080808080a05b3a8f5e031495df31cab7db35e132b74643055d219308e36f1f66087fcfc86da0badd6f611d075652f5f6ade5ddae7fb7573948573efbfe63fb0e73b4011f7e1da04252d141bc86e99392d531ed8de0b3b469b87b870711c637b5f4dd3e5caa17d8a0ccc9e92b7ebcf86fed4dd2f5cee0837f9c20f58a49b35bc6d5c94baa5e31712380a0ce1452db35e6b25a25e0aff574e978c7f87e13155f891cb6988555b93cd2f7fa8080a0f5c7d119b53fe442136f53f959bad1aa62026ec8f5af719a09a1d43b77683c5780a079814e545b5915180fc1fc0a8bad0394fe96e39da23084459b17c99128575bbf80","0xf85180808080a0566a9781e52d4279532e367bdd1cf9a09c6af940c3a72f2da2be67abacc245d48080808080808080a0c8fb43da0e2f0f264ec3da302d6ff8f65f79f0c33e227bf4767ab01db005485b808080","0xf8429f3d238688cf555f33e0e597e88e6a7777d31c1172b1192d255e7b892daaea40a1a0011d1629cf73dad4ad7098f06eaac135b61dcad4bbc78223f53273f37724538a"]}]}`
	proof := []byte(rawProof)
	extra := common.HexToHash("0x1d1629cf73dad4ad7098f06eaac135b61dcad4bbc78223f53273f37724538a67")
	rawEpoch, _ := hexutil.Decode("0xf902ab05f9028ef9028bf85bb844307830326330376662376434386561633535396132343833653234396432373834316331386337636535646262626632373936613639363363633963656632376361626494258af48e28e4a6846e931ddff8e1cdf8579821e5f85bb8443078303266353133356165303835336166373166303137613865636236386537323062373239616239326337313233633638366537356237343837643461353761653037946a708455c8777630aac9d1e7702d13f7a865b27cf85bb8443078303365636163306562653732323463666430343035366339343036303561346139643463623033363763663538313962663765353530326266343466363862646434948c09d936a1b408d6e0afaa537ba4e06c4504a0aef85bb844307830336430656366643039646236623165346635396461376562646538663663336561336564303966303666353139303437376165346565353238656336393266613894ad3bf5ed640cc72f37bd21d64a65c3c756e9c88cf85bb844307830323434653530393130333434356435653866643239303630383330386431366430386337333936353564363939343235346534313362633161303637383338353694c095448424a5ecd5ca7ccdadfaad127a9d7e88ecf85bb844307830323338383464653239313438353035613864383632393932653537323137363764346234376666353266666162346332643235323731383264383132613664393594d47a4e56e9262543db39d9203cf1a2e53735f834f85bb844307830336238333866613233383762656233613536616564383665343437333039663838343463623230383338376336336166363461643734303732396235633061323794bfb558f0dceb07fbb09e1c283048b551a431092182044c94258af48e28e4a6846e931ddff8e1cdf8579821e502")

	_, _, err := testInitGenesisBlock(sender, []byte(rawHeader), proof, extra[:], rawEpoch)
	assert.NoError(t, err)
}

func TestChangeEpoch(t *testing.T) {
	resetTestContext()
	s := testEmptyCtx

	// store last epoch
	rawLastEpoch, _ := hexutil.Decode("0xf901f104f901d4f901d1f85bb844307830326330376662376434386561633535396132343833653234396432373834316331386337636535646262626632373936613639363363633963656632376361626494258af48e28e4a6846e931ddff8e1cdf8579821e5f85bb8443078303266353133356165303835336166373166303137613865636236386537323062373239616239326337313233633638366537356237343837643461353761653037946a708455c8777630aac9d1e7702d13f7a865b27cf85bb8443078303365636163306562653732323463666430343035366339343036303561346139643463623033363763663538313962663765353530326266343466363862646434948c09d936a1b408d6e0afaa537ba4e06c4504a0aef85bb844307830336430656366643039646236623165346635396461376562646538663663336561336564303966303666353139303437376165346565353238656336393266613894ad3bf5ed640cc72f37bd21d64a65c3c756e9c88cf85bb844307830323434653530393130333434356435653866643239303630383330386431366430386337333936353564363939343235346534313362633161303637383338353694c095448424a5ecd5ca7ccdadfaad127a9d7e88ec8203e894258af48e28e4a6846e931ddff8e1cdf8579821e502")
	storeEpoch(s, rawLastEpoch)

	sender := common.EmptyAddress
	rawHeader := `{"parentHash":"0x8adbb7aa118074c58ce20966b19734a4a0cfa2898f5bfcd01b086b068351ff5a","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","miner":"0x8c09d936a1b408d6e0afaa537ba4e06c4504a0ae","stateRoot":"0x8a5364fbb3e7d3c5076c9c887d84e9569d277975ab9b428046a311a60543639b","transactionsRoot":"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421","receiptsRoot":"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","difficulty":"0x1","number":"0x44b","gasLimit":"0x577ae927","gasUsed":"0x0","timestamp":"0x6177784f","extraData":"0x0000000000000000000000000000000000000000000000000000000000000000f901e8f89394258af48e28e4a6846e931ddff8e1cdf8579821e5946a708455c8777630aac9d1e7702d13f7a865b27c948c09d936a1b408d6e0afaa537ba4e06c4504a0ae94ad3bf5ed640cc72f37bd21d64a65c3c756e9c88c94c095448424a5ecd5ca7ccdadfaad127a9d7e88ec94d47a4e56e9262543db39d9203cf1a2e53735f83494bfb558f0dceb07fbb09e1c283048b551a4310921b8418aece0db7a7534f6d8f3b2b49c5bd5aae27c20fe8637f57670c24c8255a7119d1d70eb279d1dceb397514f6c7182981aad0b20febd18d00653056fb837d205cc01f9010cb841e065730b6ab96d2172eb9c34c7b89dcec57a4933ffdc0e941ac0beb91a69861604007302525252a94919e0f302830cd444ab43b52f593a8a287afc82aa5ef08f00b841e3696e39bb78b65fb9a9af5960e95147a8a2b54fdb78876a1ac5adeb2d09497c33bbf05bd0cdcc921e16ab66a3b409268b551ee9f805db587e19557d3e5bad7701b8417ed6a92254435c47ce41c8119621a1b9a2e1eda12241912c8127b5fd3ee76d9d5b9326dc50ae6e4f9d142086a7eb4b99f5bdd270d86d22adbe4591c33c6f5c4700b8418aece0db7a7534f6d8f3b2b49c5bd5aae27c20fe8637f57670c24c8255a7119d1d70eb279d1dceb397514f6c7182981aad0b20febd18d00653056fb837d205cc0180","mixHash":"0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365","nonce":"0x0000000000000000","hash":"0xefd31bec3a0056825006b3c68d1589b5c5ba2a5a19fe02360e84236ea6682415"}`
	header := new(types.Header)
	assert.NoError(t, header.UnmarshalJSON([]byte(rawHeader)))
	rawProof := `{"address":"0xa4bf827047a08510722b2d62e668a72fccfa232c","accountProof":["0xf901d1a03fcc929cd4de4523a85947f2901e7b2ebb40ed7e7b798ed4dbc38b1dc3bd0966a0ef1dcf53a29d51cd14fdc15753f8ac43ead21346da51c025cb37f4f62bbebf10a00955fb784f4a8d1e30f07fd7d682372f0d5978eb44236f2a3d907838da784591a0352a03c296be472cac5c189ac90c9c75431d6d9dfc1a9e502dfc8fd9507df537a0c891ca4bcc13742bc9bdd9d7e248f1be80a59250a47549e2f4ad7d191a8c817aa0cb72678be243c86782166cbc930f482676b31ee7d4dd8f257d8fa5a5e78dfeb7a0a952bf5c72fc73a55d4f5472df83484f2509f94d7ec1249178ba8179d8420fa4a00d4acd3af141cfd38da59ed14f4dd4d6a1dc2e99d8b7d476265c6d2508e9fec2a091cc76100ed9c6e2279af2ecc274d8d6b87eb8c39b0a5b36289272d0dff648dda0390310f48aaa4eb61cf64028096cebbce67fb5c8e977597645e5859237dfbce580a04bae44fb6eaa5adb4f2e43d5e984e3a496b58af2ead4cd98a5caf4aefb1e18eba062e4745a57b0201f3072f3638ccbe6c1d178a329d8f022ddf528ecaf0ee25aeba0fe9f4f2ce263c0056c240b0e97d9eda864d729564473466d7a4ebe37040066fe80a0b3600f8656bea96b084f77e64437487a8d1b2d7b6337b90a8a01c7d8dad81b5d80","0xf85180808080a0157fb3dff6b24695fb8525471ff05d750063431066a5e4ea1f934adc295ad4b98080a0a5c67cad3d75ba041d439a056bd377f41419037f4cffd47cb5c1bfa6a65efa5b808080808080808080","0xf869a020c95f7e3729a6463454a092263f59f28afe9de8b074f0112ce5ebfcc9d5cbffb846f8440180a0edbf76ccc0f5e23a2d134ad810bd6964d47fa4116e5196278a4459070db4babda0f4c95f7e3729a6463454a092263f59f28afe9de8b074f0112ce5ebfcc9d5cbff"],"balance":"0x0","codeHash":"0xf4c95f7e3729a6463454a092263f59f28afe9de8b074f0112ce5ebfcc9d5cbff","nonce":"0x1","storageHash":"0xedbf76ccc0f5e23a2d134ad810bd6964d47fa4116e5196278a4459070db4babd","storageProof":[{"key":"0xe71d2f8e284a5b3bfe5466b46b9aac29bc8bd494f7969a3511b9ae36999c318b","value":"0x11d1629cf73dad4ad7098f06eaac135b61dcad4bbc78223f53273f37724538a","proof":["0xf90211a0539634ecb4469ee1b6ea1451157de946f767edb6b6a4b86e8d261c7f078f56d3a00e8ae182f1726af2c1beeb061795259bcdafadb4bb628834cb64926b27cb640da0e085433339117689b83cc6d2276c365772829b63ca78a3838ece4cc26d9ef7f7a0b46b2749a546a901e4b27defe6f9eec7b9c8f233e8d02a3f12b796e29aeb3b4ba0e59e352332a982a29dd1925798bc6a72eeac2dfeca7191a315cfdbfff2eb1ec2a0baf03c6a1cd654cd719eefc9802351bfb0030ba77e04a50b1f934e2d89f195dda07716bc42463b7dd763ecf92e63311264309daafd5938de2d65297006c3d4c8bfa058b834d4fbecb47150bed378a6a5a481e4e005e115b996e37054b3f89ede66c7a0b94e8501061e01949b90a7abc96b8f6816ba0d5617fb0d11dd04e5c6ca1bad66a03bd4d1c6a408661ceca42bae5e624d7d7c8a73f02b80e882ff61973e75502a5da02f23489ab1de47ee919371f2f58a0640a02cc6a96bb6ce5b57534a4d2f10de86a0dab880d67d46424fffc75b75fc3f09a80e3d10a63ad3e46be8163193b8e25321a0b0f1d7836f21aa7232937c13460626abb02f25033074f31307687fd8b97debcca016a66dd5e0f2ab512fc781682ae60580a17215a085fd7ed5e6b9c959bbd49856a0bd668ab6393de1119ecb8946e6918aea9fa631d9da42514924834dd22b6db962a0f95a939eda43d2d73f6f82baad7a560fa77a4515a03a40d908211b162ed8860980","0xf8f18080808080a05b3a8f5e031495df31cab7db35e132b74643055d219308e36f1f66087fcfc86da0badd6f611d075652f5f6ade5ddae7fb7573948573efbfe63fb0e73b4011f7e1da04252d141bc86e99392d531ed8de0b3b469b87b870711c637b5f4dd3e5caa17d8a0ccc9e92b7ebcf86fed4dd2f5cee0837f9c20f58a49b35bc6d5c94baa5e31712380a0ce1452db35e6b25a25e0aff574e978c7f87e13155f891cb6988555b93cd2f7fa8080a0f5c7d119b53fe442136f53f959bad1aa62026ec8f5af719a09a1d43b77683c5780a079814e545b5915180fc1fc0a8bad0394fe96e39da23084459b17c99128575bbf80","0xf85180808080a0566a9781e52d4279532e367bdd1cf9a09c6af940c3a72f2da2be67abacc245d48080808080808080a0c8fb43da0e2f0f264ec3da302d6ff8f65f79f0c33e227bf4767ab01db005485b808080","0xf8429f3d238688cf555f33e0e597e88e6a7777d31c1172b1192d255e7b892daaea40a1a0011d1629cf73dad4ad7098f06eaac135b61dcad4bbc78223f53273f37724538a"]}]}`
	proof := []byte(rawProof)
	extra := common.HexToHash("0x1d1629cf73dad4ad7098f06eaac135b61dcad4bbc78223f53273f37724538a67")
	rawEpoch, _ := hexutil.Decode("0xf902ab05f9028ef9028bf85bb844307830326330376662376434386561633535396132343833653234396432373834316331386337636535646262626632373936613639363363633963656632376361626494258af48e28e4a6846e931ddff8e1cdf8579821e5f85bb8443078303266353133356165303835336166373166303137613865636236386537323062373239616239326337313233633638366537356237343837643461353761653037946a708455c8777630aac9d1e7702d13f7a865b27cf85bb8443078303365636163306562653732323463666430343035366339343036303561346139643463623033363763663538313962663765353530326266343466363862646434948c09d936a1b408d6e0afaa537ba4e06c4504a0aef85bb844307830336430656366643039646236623165346635396461376562646538663663336561336564303966303666353139303437376165346565353238656336393266613894ad3bf5ed640cc72f37bd21d64a65c3c756e9c88cf85bb844307830323434653530393130333434356435653866643239303630383330386431366430386337333936353564363939343235346534313362633161303637383338353694c095448424a5ecd5ca7ccdadfaad127a9d7e88ecf85bb844307830323338383464653239313438353035613864383632393932653537323137363764346234376666353266666162346332643235323731383264383132613664393594d47a4e56e9262543db39d9203cf1a2e53735f834f85bb844307830336238333866613233383762656233613536616564383665343437333039663838343463623230383338376336336166363461643734303732396235633061323794bfb558f0dceb07fbb09e1c283048b551a431092182044c94258af48e28e4a6846e931ddff8e1cdf8579821e502")

	_, _, err := testChangeEpoch(sender, []byte(rawHeader), proof, extra[:], rawEpoch)
	assert.NoError(t, err)
}

func testInitGenesisBlock(sender common.Address, header, proof, extra, epoch []byte) (*native.NativeContract, []byte, error) {
	input := &MethodInitGenesisHeaderInput{
		Header: header,
		Proof:  proof,
		Extra:  extra,
		Epoch:  epoch,
	}
	payload, err := input.Encode()
	if err != nil {
		return nil, nil, err
	}

	ctx := generateTestSenderTx(sender, payload)
	if ret, err := InitGenesisHeader(ctx); err != nil {
		return nil, nil, err
	} else {
		return ctx, ret, nil
	}
}

func testChangeEpoch(sender common.Address, header, proof, extra, epoch []byte) (*native.NativeContract, []byte, error) {
	input := &MethodChangeEpochInput{
		Header: header,
		Proof:  proof,
		Extra:  extra,
		Epoch:  epoch,
	}
	payload, err := input.Encode()
	if err != nil {
		return nil, nil, err
	}

	ctx := generateTestSenderTx(sender, payload)
	if ret, err := ChangeEpoch(ctx); err != nil {
		return nil, nil, err
	} else {
		return ctx, ret, nil
	}
}

func testBurn(toChainID uint64, sender, toAddress common.Address, amount *big.Int) (*native.NativeContract, []byte, error) {
	input := &MethodBurnInput{
		ToChainId: toChainID,
		ToAddress: toAddress,
		Amount:    amount,
	}
	payload, err := input.Encode()
	if err != nil {
		return nil, nil, err
	}

	ctx := generateTestSenderTx(sender, payload)
	if ret, err := Burn(ctx); err != nil {
		return nil, nil, err
	} else {
		return ctx, ret, nil
	}
}

func testUnlock(sender common.Address, header, crossTx, proof, extra []byte) (*native.NativeContract, []byte, error) {
	input := &MethodVerifyHeaderAndMintInput{
		Header:     header,
		RawCrossTx: crossTx,
		Proof:      proof,
		Extra:      extra,
	}
	payload, err := input.Encode()
	if err != nil {
		return nil, nil, err
	}

	ctx := generateTestSenderTx(sender, payload)
	if ret, err := Mint(ctx); err != nil {
		return nil, nil, err
	} else {
		return ctx, ret, nil
	}
}

func generateTestSenderTx(sender common.Address, payload []byte) *native.NativeContract {
	txHash := nm.GenerateTestHash(rand.Int())
	ref := native.NewContractRef(testStateDB, sender, sender, big.NewInt(testBlockNum), txHash, testSupplyGas, nil)
	ref.PushContext(&native.Context{
		Caller:          sender,
		ContractAddress: this,
		Payload:         payload,
	})
	return native.NewNativeContract(testStateDB, ref)
}

func generateTestCallCtx(payload []byte) *native.NativeContract {
	caller := common.EmptyAddress
	txHash := nm.GenerateTestHash(rand.Int())
	ref := native.NewContractRef(testStateDB, caller, caller, big.NewInt(testBlockNum), txHash, testSupplyGas, nil)
	ref.PushContext(&native.Context{
		Caller:          caller,
		ContractAddress: this,
		Payload:         payload,
	})
	return native.NewNativeContract(testStateDB, ref)
}
